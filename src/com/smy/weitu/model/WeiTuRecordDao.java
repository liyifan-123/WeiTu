package com.smy.weitu.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.smy.weitu.model.WeiTuRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WEI_TU_RECORD.
*/
public class WeiTuRecordDao extends AbstractDao<WeiTuRecord, String> {

    public static final String TABLENAME = "WEI_TU_RECORD";

    /**
     * Properties of entity WeiTuRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uri = new Property(0, String.class, "uri", true, "URI");
        public final static Property Time = new Property(1, java.util.Date.class, "time", false, "TIME");
        public final static Property Longitude = new Property(2, Long.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(3, Long.class, "latitude", false, "LATITUDE");
        public final static Property Exists = new Property(4, Boolean.class, "exists", false, "EXISTS");
        public final static Property MarkerPast = new Property(5, String.class, "markerPast", false, "MARKER_PAST");
        public final static Property MarkerNow = new Property(6, String.class, "markerNow", false, "MARKER_NOW");
        public final static Property Msg = new Property(7, String.class, "msg", false, "MSG");
    };


    public WeiTuRecordDao(DaoConfig config) {
        super(config);
    }
    
    public WeiTuRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WEI_TU_RECORD' (" + //
                "'URI' TEXT PRIMARY KEY NOT NULL ," + // 0: uri
                "'TIME' INTEGER," + // 1: time
                "'LONGITUDE' INTEGER," + // 2: longitude
                "'LATITUDE' INTEGER," + // 3: latitude
                "'EXISTS' INTEGER," + // 4: exists
                "'MARKER_PAST' TEXT," + // 5: markerPast
                "'MARKER_NOW' TEXT," + // 6: markerNow
                "'MSG' TEXT);"); // 7: msg
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WEI_TU_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WeiTuRecord entity) {
        stmt.clearBindings();
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(1, uri);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time.getTime());
        }
 
        Long longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindLong(3, longitude);
        }
 
        Long latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindLong(4, latitude);
        }
 
        Boolean exists = entity.getExists();
        if (exists != null) {
            stmt.bindLong(5, exists ? 1l: 0l);
        }
 
        String markerPast = entity.getMarkerPast();
        if (markerPast != null) {
            stmt.bindString(6, markerPast);
        }
 
        String markerNow = entity.getMarkerNow();
        if (markerNow != null) {
            stmt.bindString(7, markerNow);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(8, msg);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WeiTuRecord readEntity(Cursor cursor, int offset) {
        WeiTuRecord entity = new WeiTuRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uri
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // time
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // longitude
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // latitude
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // exists
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // markerPast
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // markerNow
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // msg
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WeiTuRecord entity, int offset) {
        entity.setUri(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setLongitude(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLatitude(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setExists(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setMarkerPast(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMarkerNow(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMsg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(WeiTuRecord entity, long rowId) {
        return entity.getUri();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(WeiTuRecord entity) {
        if(entity != null) {
            return entity.getUri();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
